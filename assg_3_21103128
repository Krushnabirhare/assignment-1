#Q.1
a=str(input("Enter a string: "))
list=a.split() #To split all the elements of string in a list
dict={} 
if list.__len__()==1:   #for a single word 
    for i in list[0]:
        if i in dict:
            dict[i]+=1
        else:
            dict[i]=1
    print(dict)   
else:                   #for a sentence
    for i in list:
        if i in dict:
            dict[i]+=1
        else:
            dict[i]=1
    print(dict)
print("\n")


#Q.2
month=int(input("Give month-"))
if(month in[1,3,5,7,8,10,12]):  #for the months containig 31 days
    day=int(input("enter day: "))
    if(1<=day<=31):
        year=int(input("enter year: "))
        if(1800<=year<=2025):
            print("Date-",day,"/",month,"/",year)
            if(month==12 and day==31):
                print("Next Date-","1/1/",year+1)
            elif(day==31):
                print("Next Date-","1/",month+1,"/",year)
            else:
                print("Next Date-",day+1,"/",month,"/",year)
        else:
            print("invalid year")
    else:
         print("invalid date")
elif(month in[4,6,9,11]):  #for the months containing 30 days
    day=int(input("enter day: "))
    if(1<=day<=30):
        year=int(input("enter year: "))
        if(1800<=year<=2025):
            print("Date-",day,"/",month,"/",year)
            if(day==30):
                print("Next Date-","1/",month+1,"/",year)
            else:
                print("Next Date-",day+1,"/",month,"/",year)
        else:
            print("invalid year")
    else:
         print("invalid date")
elif(month==2):           #for february month
    year=int(input("enter year: "))
    if(1800<=year<=2025):
        day=int(input("enter day: "))
        if(year%4==0):    #checking whether a leap year or not
            if(1<=day<=29):
                print("Date-",day,"/",month,"/",year)
                if(day==29):
                    print("Next Date-","1/",month+1,"/",year)
                else:
                    print("Next Date-",day+1,"/",month,"/",year)              
            else:
                print("invalid day")
        else:
            if(1<=day<=28):
                print("Date-",day,"/",month,"/",year)
                if(day==28):
                    print("Next Date-","1/",month+1,"/",year)
                else:
                    print("Next Date-",day+1,"/",month,"/",year)       
            else:
                print("invalid day")     
    else:
        print("invalid year")
else:
    print("invalid month")
    
 
 #Q.3
    lower_range=int(input("Enter the lower range:"))  #enter first no. from user
upper_range=int(input("Enter the upper range:"))  #enter any last no. from user
a=[(x,x**2) for x in range(lower_range,upper_range+1)]
print(a)


#Q.4
gradepoint = int(input("Enter grade point: "))  #Enter garde points between 4 to 10
    
if(gradepoint==4):
    print("Your Grade is 'D' and poor performance")
elif(gradepoint==5):
    print("Your Grade is 'C' and Below Average performance")
elif(gradepoint==6):
    print("Your Grade is 'C+' and Average performance")
elif(gradepoint==7):
    print("Your Grade is 'B' and Good performance")
elif(gradepoint==8):
    print("Your Grade is 'B+' and Very Good performance")
elif(gradepoint==9):
    print("Your Grade is 'A' and Excellent performance")
elif(gradepoint==10):
    print("Your Grade is 'A+' and outstanding performance")
else:
    print("error")
print("\n")


#Q.5 
x = 6
for i in range(x):
    for j in range(i):
        print(' ', end='')
    # printing alphabet
    for j in range(2*(x-i)-1):
        print(chr(65 + j), end='')  #Using ASCII value of alphabets 
    print()


#Q.6
sid = int(input("Enter SID: "))
name = input("Enter Name: ")
students = {sid:name}

while True:
    option = input("Do you want to enter another student entry(Y or N):").upper()
    if option == 'Y':
        sid = int(input("Enter SID: "))
        name = input("Enter Name: ")
        students[sid] = name
    elif option == 'N':
        break
    else:
        print('Invalid input!')

#a
print("a)",students)

#b
print("b)",{k:v for k,v in sorted(students.items(), key= lambda x:x[1])})

#c
print("c)",{k:v for k,v in sorted(students.items())})

#d
sid = int(input("Search Name with SID: "))
print("d)",students[sid])


#Q.7
#  Function to display the Fibonacci sequence
def recur_fibo(n):
   if n <= 1:
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))
no_of_terms=int(input("ENTER THE NUMBER OF TERMS IN THE SERIES: "))
if no_of_terms <= 0:     # Check if the number of terms is valid
   print("Plese enter a positive integer")
else:
   print("Fibonacci sequence:")
   sum=0
   for i in range(no_of_terms):
       print(recur_fibo(i))
       sum=sum+recur_fibo(i)
avg=float(sum/no_of_terms)
print("Avg. of fibonacci series is: ",avg)


#Q.8
Set1={1,2,3,4,5}
Set2={2,4,6,8}
Set3={1,5,9,13,17}

#a)
print('a]')
required_Set=Set1^Set2
print(required_Set)

#b)
print('b]')
required_Set=Set1^(Set2^Set3)
print(required_Set)

#c)
print('c]')
required_Set=(Set1&Set2)|(Set2&Set3)|(Set1&Set3)
print(required_Set)

#d)
print('d]')
new_Set={1,2,3,4,5,6,7,8,9,10}
required_Set=new_Set-Set1
print(required_Set)

#e)
print('e]')
required_Set=new_Set-(Set1|Set2|Set3)
print(required_Set)
