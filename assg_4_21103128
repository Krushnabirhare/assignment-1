#Q.1
def towerofhanoi(n,source,auxillary,target):  #here A is referred as source,B as auxilarry ,and C as target 
    if n>0:
    
        towerofhanoi(n-1,source,target,auxillary)
        print("move disk from rod",source,"to rod",target)
        towerofhanoi(n-1,auxillary,source,target)
towerofhanoi(3,"A","B","C")
print("\n")



#Q.2
from math import factorial, remainder
from tracemalloc import start
n=int(input('Enter the size of pascals triangle '))

print("USING LOOPS")

for i in range(n):
	for j in range(n-i+1):
		print(end=" ") #for spacing

	for j in range(i+1):
		print(factorial(i)//(factorial(j)*factorial(i-j)), end=" ")	# nCr = n!/((n-r)!*r!)
	print()	# for new line
print("\n\n")

print("USING RECURSSIONS")

def pascal_triangle(n,originalength=n):
    if n == 0:
        return
    pascal_triangle(n-1,originalength)
    #printing the spaces
    print('  '*(originalength-n), end='')

    #first number is always 1
    start = 1
    for i in range(1, n+1):

        print(start, end ='   ')
        
        #using Binomial Coefficient
        start = start * (n - i) // i
    print()
pascal_triangle(n)
print("\n")


#Q.3
int1, int2 = map(int,input("Enter 2 numbers: ").split())
Quotient = int1 // int2
Remainder = int1 % int2

#a
print("a. Checking if the quotient and remainder is a callable value or not.")
print(callable(Quotient))
print(callable(Remainder))

#b
if (Quotient == 0):
    print("b.The quotient is zero")
if (Remainder == 0):
    print("b. The reminder is zero")
if (Quotient != 0 and Remainder != 0):
    print("b.All the values are non zero")

#c
partClist = [Quotient + 4, Remainder + 4, Remainder + 5, Quotient + 5, Remainder + 5, Quotient + 6, Remainder + 6]

result = []
for i in range(len(partClist)):
    if partClist[i] > 4:
        result.append(partClist[i])
print("c.Filtered out numbers that are greater than 4 are : {result}")

#d
setresult = set(result)
print("d.Set:",setresult)

#e
immutableSet = frozenset(setresult)     #used to make the set immutable
print("e.Immutable set:",immutableSet)

#f
print("f.Hash value of the max value from the above set:", hash(max(immutableSet)))
print("\n")


#Q.4
class Student:
    def __init__(self,student_name,rollnum):
        self.student_name=student_name
        self.rollnum=rollnum
    def __del__(self):
        print("The object is destroyed.")   #deleting object


S1=Student("krushna",3128)   #object created 
print(S1.student_name)
print(S1.rollnum)
print("\n")


#Q.5
class Employee:
    def __init__(self,name,salary):
        self.name=name
        self.salary=salary

S1=Employee("Mehak",40000)
S2=Employee("Ashok",50000)
S3=Employee("Viren",60000)

#updating salary of Mehak to 70000
S1.salary=70000
print("a)\nupdated salary of Mehak :",S1.salary)

#deleting the record of Viren
del S1
print("b)\nThe record of Viren has been successfully deleted.")
print("\n")


#Q.6
def anagram(word):
    if len(word)==1:
        return [word];
    partial_words=anagram(word[1:])
    char=word[0]
    result=[]
    for perm in partial_words:
        for i in range(len(perm)+1):
            result.append(perm[:i]+char+perm[i:])
    return result        


George_word=input("Please give a word-")
Possible_words=anagram(George_word)
Barbie_word=input("Give a word-")
print("Possible Words-",Possible_words)
print("If Barbie's word lies in the list,then their friendship is real.")

if Barbie_word in Possible_words:
    print("Friendship is real.")
else:
    print("Friendship is fake.")
    
